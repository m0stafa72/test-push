{"version":3,"sources":["logo.svg","init-fcm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","messaging","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","usePublicVapidKey","App","requestPermission","then","a","getToken","catch","err","console","log","navigator","serviceWorker","addEventListener","message","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,qLCWrCC,G,MATyBC,gBAAuB,CAClDC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAE8BR,aAEzCA,EAAUS,kBACN,2F,ICcWC,E,4RAnBPV,EAAUW,oBACLC,KADL,sBACU,sBAAAC,EAAA,sEACkBb,EAAUc,WAD5B,0DAGLC,OAAM,SAAUC,GACbC,QAAQC,IAAI,sCAAuCF,MAE3DG,UAAUC,cAAcC,iBAAiB,WAAW,SAACC,GAAD,OAAaL,QAAQC,IAAII,M,gIAI7E,OACI,6BACE,yC,GAjBIC,aCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAOC,GAC9Bb,UAAUC,cACPa,SAASF,GACTnB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfpB,UAAUC,cAAcoB,YAI1BvB,QAAQC,IACN,iHAKEc,GAAUA,EAAOS,UACnBT,EAAOS,SAASP,KAMlBjB,QAAQC,IAAI,sCAGRc,GAAUA,EAAOU,WACnBV,EAAOU,UAAUR,WAO5BnB,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAM,4CAA6CA,OAlF1D,SAAkBX,GACvB,GAAI,kBAAmBb,UAAW,CAWhC,GADkB,IAAIyB,IAAIC,GAAwBnB,OAAOC,SAASmB,MACpDC,SAAWrB,OAAOC,SAASoB,OAIvC,OAGFrB,OAAOL,iBAAiB,QAAQ,WAC9B,IAAMU,EAAK,UAAMc,GAAN,6BAEPrB,IAgEV,SAAiCO,EAAOC,GAEtCgB,MAAMjB,EAAO,CACXkB,QAAS,CAAE,iBAAkB,YAE5BrC,MAAK,SAAAsC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAM3C,MAAK,SAAAsB,GACjCA,EAAasB,aAAa5C,MAAK,WAC7Bc,OAAOC,SAAS8B,eAKpB3B,EAAgBC,EAAOC,MAG1BjB,OAAM,WACLE,QAAQC,IACN,oEAvFAwC,CAAwB3B,EAAOC,GAI/Bb,UAAUC,cAAcmC,MAAM3C,MAAK,WACjCK,QAAQC,IACN,iHAMJY,EAAgBC,EAAOC,OCnD/BZ,GAEAuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmB5C,WACrBA,UAAUC,cAAcmC,MACrB3C,MAAK,SAAAsB,GACJA,EAAasB,gBAEdzC,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMrB,c","file":"static/js/main.2996f51a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as firebase from \"firebase/app\";\r\nimport \"firebase/messaging\";\r\nconst initializedFirebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAPMK-dMObjWvzyMvndAmH-a7lBfZ33G88\",\r\n    authDomain: \"react-app-bf60c.firebaseapp.com\",\r\n    databaseURL: \"https://react-app-bf60c.firebaseio.com\",\r\n    projectId: \"react-app-bf60c\",\r\n    storageBucket: \"react-app-bf60c.appspot.com\",\r\n    messagingSenderId: \"947122584787\",\r\n    appId: \"1:947122584787:web:63dd9bbb85f3b83495e826\"\r\n});\r\nconst messaging = initializedFirebaseApp.messaging();\r\n\r\nmessaging.usePublicVapidKey(\r\n    \"BEvoHugqnWE3Y95TvYkg4bwpZPYQxNAPKEDcGB5QUtVexzgk_EE5VbNlw6ddfN5muGmTXBPFIRwqx8APw9ZXQbY\"\r\n);\r\n\r\nexport { messaging };","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {messaging} from \"./init-fcm\";\n\nclass App extends Component {\n\n\n     async componentDidMount() {\n        messaging.requestPermission()\n            .then(async function () {\n                const token = await messaging.getToken();\n            })\n            .catch(function (err) {\n                console.log(\"Unable to get permission to notify.\", err);\n            });\n        navigator.serviceWorker.addEventListener(\"message\", (message) => console.log(message));\n    }\n\n    render() {\n        return (\n            <div>\n              <h2>home</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    /*navigator.serviceWorker\n        .register(\"./firebase-messaging-sw.js\")\n        .then(function(registration) {\n          console.log(\"Registration successful, scope is:\", registration.scope);\n        })\n        .catch(function(err) {\n          console.log(\"Service worker registration failed, error:\", err);\n        });*/\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nserviceWorker.register();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}